//
//  JzStyleKit.m
//  JETZUN™
//
//  Created by Charles P Ajemian on 12/2/15.
//  Copyright (c) 2015 JETZUN™. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "JzStyleKit.h"


@implementation JzStyleKit

#pragma mark Cache

static UIColor* _jzGrey = nil;

static NSShadow* _jzDropShadow = nil;

#pragma mark Initialization

+ (void)initialize
{
    // Colors Initialization
    _jzGrey = [UIColor colorWithRed: 0.349 green: 0.367 blue: 0.375 alpha: 1];

    // Shadows Initialization
    _jzDropShadow = [NSShadow shadowWithColor: [UIColor.blackColor colorWithAlphaComponent: 0.24] offset: CGSizeMake(4.1, 4.1) blurRadius: 8];

}

#pragma mark Colors

+ (UIColor*)jzGrey { return _jzGrey; }

#pragma mark Shadows

+ (NSShadow*)jzDropShadow { return _jzDropShadow; }

#pragma mark Drawing Methods

+ (void)drawJzCardWithJzCardFrame: (CGRect)jzCardFrame rectangle2: (CGRect)rectangle2
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// jzCard-box Drawing
    UIBezierPath* jzCardboxPath = [UIBezierPath bezierPathWithRoundedRect: rectangle2 cornerRadius: 12];
    CGContextSaveGState(context);
    CGContextSetShadowWithColor(context, JzStyleKit.jzDropShadow.shadowOffset, JzStyleKit.jzDropShadow.shadowBlurRadius, [JzStyleKit.jzDropShadow.shadowColor CGColor]);
    [JzStyleKit.jzGrey setFill];
    [jzCardboxPath fill];
    CGContextRestoreGState(context);
}

#pragma mark Generated Images

+ (UIImage*)imageOfJzCardWithJzCardFrame: (CGRect)jzCardFrame rectangle2: (CGRect)rectangle2
{
    UIGraphicsBeginImageContextWithOptions(jzCardFrame.size, NO, 0.0f);
    [JzStyleKit drawJzCardWithJzCardFrame: CGRectMake(0, 0, jzCardFrame.size.width, jzCardFrame.size.height) rectangle2: rectangle2];

    UIImage* imageOfJzCard = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return imageOfJzCard;
}

@end



@implementation NSShadow (PaintCodeAdditions)

- (instancetype)initWithColor: (UIColor*)color offset: (CGSize)offset blurRadius: (CGFloat)blurRadius
{
    self = [self init];
    if (self)
    {
        self.shadowColor = color;
        self.shadowOffset = offset;
        self.shadowBlurRadius = blurRadius;
    }
    return self;
}

+ (instancetype)shadowWithColor: (UIColor*)color offset: (CGSize)offset blurRadius: (CGFloat)blurRadius
{
    return [[self alloc] initWithColor: color offset: offset blurRadius: blurRadius];
}

- (void)set
{
    CGContextSetShadowWithColor(UIGraphicsGetCurrentContext(), self.shadowOffset, self.shadowBlurRadius, [self.shadowColor CGColor]);
}

@end
